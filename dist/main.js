// Generated by LiveScript 1.6.0
(function(){
  var com, z, j, l, yuan, gaurd, SI, utilInspectCustom, noop, R, reg, get, ap, handle, main, prox, F, P;
  com = require("./common");
  z = com.z, j = com.j, l = com.l, yuan = com.yuan, gaurd = com.gaurd, SI = com.SI;
  utilInspectCustom = com.utilInspectCustom;
  noop = com.noop, R = com.R;
  reg = require("./registry");
  require("./print");
  get = reg.get;
  get.main = function(data, key){
    var newpath;
    newpath = data.path.concat(key);
    return main(data.fun, data.state, newpath);
  };
  get.entry = function(data, key){
    var uic;
    uic = utilInspectCustom;
    if (key === "name") {
      return data.fun.name;
    }
    if (key === uic) {
      if (data.fun.log) {
        return data.fun.log;
      }
      if (data.fun[uic]) {
        return data.fun[uic];
      }
      return noop;
    } else {
      return get.main(data, key);
    }
  };
  ap = function(arg$, args){
    var fun, path, state;
    fun = arg$.fun, path = arg$.path, state = arg$.state;
    return fun(path, args, state);
  };
  handle = function(data){
    this.data = data;
    return this;
  };
  handle.prototype.get = function(__, key, ___){
    return get.entry(this.data, key);
  };
  handle.prototype.apply = function(__, ___, args){
    return ap(this.data, args);
  };
  handle.of = function(data){
    return new handle(data);
  };
  main = reg.main;
  prox = function(fun, state, path){
    var data, prop, P;
    data = {
      fun: fun,
      state: state,
      path: path,
      cache: {}
    };
    prop = handle.of(data);
    P = new Proxy(noop, prop);
    return P;
  };
  main = yuan.match(function(fun){
    return prox(fun, {}, []);
  }, function(fun, state){
    return prox(fun, state, []);
  }, prox, reg.printE.noArg);
  F = function(){
    z(":mainF");
  };
  P = main(F);
  P.hello.world;
}).call(this);
