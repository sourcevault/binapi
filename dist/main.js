// Generated by LiveScript 1.6.0
var reg, com, printE, noop, R, z, l, uic, generic_log, veri, get, ap, pub;
reg = require("./registry");
com = reg.com, printE = reg.printE;
noop = com.noop, R = com.R, z = com.z, l = com.l;
uic = com.utilInspectCustom;
require("./print");
generic_log = function(path, state){
  l(path);
  return state;
};
veri = function(arglen, fun, custom_log){
  switch (arglen) {
  case 0:
    printE.noArg();
    return null;
  }
  switch (typeof fun) {
  case 'function':
    0;
    break;
  default:
    printE.type("first argument should be a function");
    return null;
  }
  switch (typeof custom_log) {
  case 'function':
    return custom_log;
  default:
    return generic_log;
  }
};
get = function(__, key, ___){
  var ret, hist, data, P;
  switch (key) {
  case uic:
    return this.log(this.hist, this.state);
  }
  ret = this.cache[key];
  if (ret) {
    return ret;
  }
  hist = this.hist.concat(key);
  data = {
    hist: hist,
    cache: {},
    log: this.log,
    fun: this.fun,
    state: this.state,
    apply: ap,
    get: get
  };
  P = new Proxy(noop, data);
  this.cache[key] = P;
  return P;
};
ap = function(__, ___, args){
  return this.fun(this.hist, args, this.state);
};
pub = function(fun, state, ulog){
  var log, data, P;
  log = veri(arguments.length, fun, ulog);
  switch (log) {
  case null:
    return;
  }
  data = {
    log: log,
    fun: fun,
    state: state,
    hist: [],
    cache: {},
    apply: ap,
    get: get
  };
  P = new Proxy(noop, data);
  return P;
};
module.exports = pub;