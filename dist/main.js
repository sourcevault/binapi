// Generated by LiveScript 1.6.0
(function(){
  var com, z, j, l, yuan, gaurd, SI, utilInspectCustom, noop, R, guard, uic, ref$, get, printE, createInitialSelf, ap, handle, checkLog, main, x$, entry, pub;
  com = require("./common");
  z = com.z, j = com.j, l = com.l, yuan = com.yuan, gaurd = com.gaurd, SI = com.SI;
  utilInspectCustom = com.utilInspectCustom;
  noop = com.noop, R = com.R, guard = com.guard;
  uic = utilInspectCustom;
  ref$ = require("./registry"), get = ref$.get, printE = ref$.printE;
  require("./print");
  createInitialSelf = function(attr){
    var out, i$, len$, I;
    out = {};
    for (i$ = 0, len$ = attr.length; i$ < len$; ++i$) {
      I = attr[i$];
      out[I] = false;
    }
    return SI(out);
  };
  get.main = function(data, key){
    var hist, P;
    if (!data.cache[key]) {
      hist = (function(){
        switch (data.type) {
        case 'list':
          return data.hist.concat(key);
        case 'obj':
          return data.hist.set(key, true);
        }
      }());
      P = main(data.fun, data.state, hist, data.type, data.log);
      data.cache[key] = P;
      return P;
    } else {
      return data.cache[key];
    }
  };
  get.entry = function(data, key){
    switch (key) {
    case 'name':
      return data.fun.name;
    case uic:
      return data.log(data.hist, data.state);
    default:
      return get.main(data, key);
    }
  };
  ap = function(arg$, args){
    var fun, hist, state;
    fun = arg$.fun, hist = arg$.hist, state = arg$.state;
    return fun(hist, args, state);
  };
  handle = function(data){
    this.data = data;
    return this;
  };
  handle.prototype.get = function(__, key, ___){
    return get.entry(this.data, key);
  };
  handle.prototype.apply = function(__, ___, args){
    return ap(this.data, args);
  };
  handle.of = function(data){
    return new handle(data);
  };
  checkLog = function(fun){
    if (typeof fun.log === 'function') {
      return fun.log;
    } else if (typeof fun[uic] === 'function') {
      return fun[uic];
    } else {
      return function(){
        return fun.name;
      };
    }
  };
  main = function(fun, state, hist, type, log){
    var data, prop, P;
    data = {
      fun: fun,
      state: state,
      hist: hist,
      type: type,
      log: log,
      cache: {}
    };
    prop = handle.of(data);
    P = new Proxy(noop, prop);
    return P;
  };
  x$ = entry = {};
  x$.list = null;
  x$.obj = null;
  entry.list = function(fun, state, hist){
    var log;
    hist == null && (hist = []);
    if (arguments.length === 0) {
      printE.noArg();
      return;
    }
    if (!(typeof fun === 'function')) {
      printE.funIsFun();
      return;
    }
    log = checkLog(fun);
    return main(fun, state, hist, 'list', log);
  };
  entry.obj = function(fun, state, attr){
    var log, hist;
    attr == null && (attr = []);
    if (arguments.length === 0) {
      printE.noArg();
      return;
    }
    if (!(typeof fun === 'function')) {
      printE.funIsFun();
      return;
    }
    log = checkLog(fun);
    hist = createInitialSelf(attr);
    return main(fun, state, hist, 'obj', log);
  };
  pub = entry.list;
  pub.list = entry.list;
  pub.obj = entry.obj;
  module.exports = pub;
}).call(this);
